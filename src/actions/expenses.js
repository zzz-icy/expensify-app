// Actions for expenses
import uuid from 'uuid';
import database from '../firebase/firebase';
// action generators
// ADD-EXPENSE

// export const addExpense = (
//     { description = '', note = '', amount = 0, createdAt = 0 } = {}
// ) => (
//         {
//             type: 'ADD_EXPENSE',
//             expense: {
//                 id: uuid(),
//                 description,
//                 note,
//                 amount,
//                 createdAt,
//             }
//         });

// we do not need the id generated by uuid(), will use the id generated by firebase, so rewrite the addExpense

export const addExpense = (expense) => (
    {
        type: 'ADD_EXPENSE',
        expense
    });


export const startAddExpense = (expenseData = {}) => {
    return (dispatch) => {
        const {
            description = '',
            note = '',
            amount = 0,
            createdAt = 0
        } = expenseData;
        const expense = { description, note, amount, createdAt };
        // add return so that we can chain .then() in the test
        return database.ref('expenses').push(expense).then((ref) => { //.then() gets called with the ref, so we have access to the id 
            dispatch(addExpense(
                {
                    id: ref.key,
                    ...expense
                }
            ));
        });
    }
};


// REMOVE_EXPENSE
export const removeExpense = ({ id } = {}) => ({
    type: 'REMOVE_EXPENSE',
    id
});
// EDIT_EXPENSE
export const editExpense = (id, updates) => ({
    type: 'EDIT_EXPENSE',
    id,
    updates
});
